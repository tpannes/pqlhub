/* v3.2
 * PQL script "CopyAttributesGeneric" 2011-2014 by TimoP
 * 
 * Description:  
 *   The script copies attribute values between two instances or templates to quickly populate 
 *   attributes of a new object based on an existing, already configured one.
 *   If can be configured whether binary attributes and/or system attributes ($name / $internalname) 
 *   should be copied or not
 *   It is also possible to define a list of attributes that will be ignored (e.g. "Metadata" for DATA objects)
 * 
 * Input parameters:
 *   Param1:  source object OID
 *   Param2:  target object OID
 *   Param3:  list of attributes to ignore (optional)
 *   Param4:  flag defining whether system attributes $name and $internalname should be omitted (optional, default: no)
 *   Param5:  flag defining whether binary attributes should be omitted (optional, default: no)
 *   Param6:  simulation mode (optional: default: false) 
 *   Param7:  verbose level (optional, default: 3)
 *
 * Return: 
 *   Number of changed attributes on target object
 * 
 */

//@MSG_ERROR   = 'PFGM0001E';
@MSG_WARNING = 'PFGM0002W';
@MSG_INFO    = 'PFGM0003I';
@ATTR_TYPE_BINARY        = 15;
@ACCESSIBILITY_ATTR_NAME = '$Accessibility';
@ACCESSIBILITY_PROTECTED = 2;


@self   = $self.$id,$displayname,$node,$classGUID,$inheritance,*;
@class  = @self\$ClassGUID.$internalName;
@method = 'CopyAttributesGeneric';
@binVersion = ParseAmount(Left($CurrentNodeId.BuildNumber,4));

@sourceObj      = ToObjRef($param1);
@targetObj      = ToObjRef($param2);
@attrIgnore     = ToArray($param3);
@omitObjNames   = $param4;
@omitBinAttrs   = $param5;
@simulationMode = $param6;
@verboseLevel   = $param7;

if (@verboseLevel==$invalid) then 
  @verboseLevel=3; 
endif 

@attrCountChanged = 0;
if (@verboseLevel>0) then
  message(@MSG_INFO, '['+@class+'::'+@method+'] Copy attributes from source '+@sourceObj.$id+' to target '+@targetObj.$id+'...');
  if (@simulationMode) then
    message(@MSG_INFO, 'Simulation mode is SET. Nothing will be physically copied.');
  endif
  if (@omitBinAttrs) then
    message(@MSG_INFO, 'Binary attribute copy is disabled');
  endif
endif

// get list of all attributes defined on source object
@attributes = @sourceObj\$Inheritance\$AttrDef.$AttrNameIntern,$Type GroupBy $AttrNameIntern;
if (!@omitObjNames) then
  @attributes = Union((\$Subset.("$"+"Name")         as '$AttrNameIntern',(8) as '$Type'), @attributes);
  @attributes = Union((\$Subset.("$"+"InternalName") as '$AttrNameIntern',(8) as '$Type'), @attributes);
endif


forEach @attr in (@attributes)

  // ignore attributes from given ignore list
  if (Count(@attrIgnore) AND @attr like @attrIgnore) then
    if (@verboseLevel>2) then
      message(@MSG_INFO, '  - "'+@attr+'" is ignored since its on ignore list');
    endif
    next
  endif
  
  // ignore binary attributes if flag is set
  if (@omitBinAttrs && @attr.$Type==@ATTR_TYPE_BINARY) then
    if (@verboseLevel>2) then
      message(@MSG_INFO, '  - "'+@attr+'" is ignored since binary attribute copy is disabled');
    endif
    next
  endif

  // ignore "Protected" attributes (only v7.16 up where system property $Accessibility is available) 
  if (@binVersion >= 7.16) then
    if (@attr\$reload.@ACCESSIBILITY_ATTR_NAME==@ACCESSIBILITY_PROTECTED) then
      if (@verboseLevel>2) then
        message(@MSG_WARNING, '  - "'+@attr+'" is "Protected" and cannot be accessed');
      endif
      next
    endif
  endif
  
  // copy remaining attributes
  @isAttrDefinedOnTarget = count(@targetObj\$inheritance\$attrdef(.$attrnameintern==@attr).$attrnameintern)>0;  
  if (@isAttrDefinedOnTarget OR @attr.$AttrNameIntern like {'$Name', '$InternalName'}) then
    if ((@sourceObj.@attr != @targetObj.@attr)) then
      if (@targetObj.@attr.$Editable OR @attr.$AttrNameIntern like {'$Name', '$InternalName'}) then
        if (@verboseLevel>1) then
          if (@attr.$Type!=@ATTR_TYPE_BINARY) then
            message(@MSG_INFO, '  + "'+@attr+'": value is changed from "'+@targetObj.@attr+'" to "'+@sourceObj.@attr+'".');
          else
            message(@MSG_INFO, '  + "'+@attr+'": binary data is copied from source');
          endif
        endif
        if (!@simulationMode) then
          @targetObj.@attr = @sourceObj.@attr;
        endif
        @attrCountChanged++;
      else
        if (@verboseLevel>1) then
          message(@MSG_WARNING, '  - "'+@attr+'" is not editable and cannot be changed to "'+@sourceObj.@attr+'".');
        endif
      endif // (@targetObj.@attr.$Editable)
    else
      if (@verboseLevel>2) then
        message(@MSG_INFO, '  = "'+@attr+'": value on target already equals source');
      endif
    endif // (@sourceObj.@attr != @targetObj.@attr)
  else
    if (@verboseLevel>2) then
      message(@MSG_INFO, '  - "'+@attr+'" is ignored since it is not defined on target object');
    endif  
  endif // (@isAttrDefinedOnTarget)

next

if (@verboseLevel>0) then
  message(@MSG_INFO, ''+@attrCountChanged+' attributes were changed');
endif

return @attrCountChanged;
