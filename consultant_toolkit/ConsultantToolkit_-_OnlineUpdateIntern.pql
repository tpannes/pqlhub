/* PQL script "OnlineUpdate" created 2014 by TimoP
 * Version 1.3
 * 
 * Description:  
 *   The script updates all generic method implementations with the latest version available on a remote GitHub repository.  
 *   If the class is NOT in development, the update will be simulated. 
 *   Only PQL methods with internal name suffix "Generic" will be updated.
 *   In addition, the version number of ConsultantToolkit is retrieved and updated on the class.
 * 
 * Input parameters:
 *   ---
 *
 * Return: 
 *   0 after successful operation
 * 
 */

@updateBaseURL       = $Param1;

@self   = $self.$id,$displayname,$node,$classGUID,$inheritance,$deploymentState,*;
@class  = @self\$ClassGUID.$internalName;
@node   = @self.$node;
@method = 'OnlineUpdate';

@simulate        = (@self.$DeploymentState!=1); // if class is not in development, simulate the update

@verboseLevel    = 3;

@FILENAME_PREFIX = 'ConsultantToolkit_-_';
@FILENAME_SUFFIX = '.pql';
@VERSION_FILE    = 'version_info.txt';


// --------------------------------------------------------------------------------------------------------

//@MSG_ERROR   = 'PFGM0001E';
@MSG_WARNING = 'PFGM0002W';
@MSG_INFO    = 'PFGM0003I';
@DATAGENERICBINARY   = {e1d3371a-1068-11d8-ab33-7bec1e1d933d};
@OMSMETHDEF          = {cbbf7ed0-f1cc-11dd-8d37-873433f8a72c};
@OMSATTRHDEF         = {831975e0-f1c8-11dd-8d37-873433f8a72c};
@REGEX_EXTRACT_VN    = '[\s]*([0-9]+\.[0-9]+)[\s]+[.]*';

@methodsToUpdate = @self\$Inheritance\$MethDef(.$ImplementationName like "PqlExecute*" AND .$MethNameIntern like "*Generic").$MethNameIntern;
@updateBuffer = {};

@tempData   = @node.InstantiateTransient(@DATAGENERICBINARY).Return1;
if (@verboseLevel>0) then
  if (@simulate) then 
    @simulationStatus = 'ON';
  else
    @simulationStatus = 'OFF';
  endif
  message(@MSG_INFO, '['+@class+'::'+@method+'] Starting Online Update... (Simulation Mode: '+@simulationStatus+')'); 
endif

ForEach @m in (@methodsToUpdate)
  
  @currentMethod = @m.$MethNameIntern;
  if (@verboseLevel>0) then
    message(@MSG_INFO, ' > processing method "'+@currentMethod+'"');
  endif
  
  // 1. get method source code from online repository
  @updateUrl = @updateBaseURL + @FILENAME_PREFIX  + @currentMethod + @FILENAME_SUFFIX;
  $local($ie): @tempData.TargetName = @updateUrl;
  if ($Error) then
    message(@MSG_WARNING, '['+@class+'::'+@method+'] Could not find resource at '+@updateUrl);
    return -1; // end script if no data could be retrieved
  endif
  @fileHandle = FileOpen(@tempData, 'TargetName','r');
  @updateData = FileReadString(@fileHandle, -1);
  @updateDataSize = Length(@updateData);
  FileClose(@fileHandle);
  
  if (@verboseLevel>1) then
    message(@MSG_INFO, '   > received data from URL: '+@updateUrl + ' (length: '+@updateDataSize+')');
  endif
  
  // 2. get method source code from class definition
  @pqlData = @self\$MethDef(.$MethNameIntern==@currentMethod).$Param[1];
  @pqlData = Right(@pqlData, Length(@pqlData)-length('PqlStatement='));
  @pqlData = Substitute(@pqlData, '%%', '%'); // this is not perfect, there might be cases where percent replacement needs to be extended to get proper PQL code
  @pqlData = Substitute(@pqlData, '%=', '=');
  if (@updateData == @pqlData) then
    if (@verboseLevel>3) then
      message(@MSG_INFO, '   > local and remote resource match');
    endif  
  else
   if (@verboseLevel>3) then
      message(@MSG_INFO, '   > local and remote resource do NOT match');
    endif  
  endif

  // 3. determine versions of both local and remote sourcecode
  @versionUpdate    = RegExpMatch(@updateData, @REGEX_EXTRACT_VN);
  @versionInstalled = RegExpMatch(@pqlData, @REGEX_EXTRACT_VN);
  @versions = { @versionInstalled, @versionUpdate }; 
  @versionsParsed = Array($invalid, $invalid); 


  @idx = 1;
  While (@idx <= 2)
    @v = @versions[@idx];
    if (Count(@v)) then
      @v = ParseAmount(@v[1]);
    else
      @v = $invalid; // this should never happen as long as version number is included in first line
    endif
    @versionsParsed = InsertValue(@versionsParsed, @v, @idx);
    @idx++;
  Next
  @localVersion  = @versionsParsed[1];
  @remoteVersion = @versionsParsed[2];
  if (@localVersion==$invalid) then
    message(@MSG_WARNING, '   > local resource version could not be determined. Method will be ignored.');
    Next; // jump to next method 
  elseif (@remoteVersion==$invalid) then
    message(@MSG_WARNING, '   > remote resource version could not be determined. Method will be ignored.');
    Next; // jump to next method 
  endif
  
  // 4. check if imported code is equal to current version  
  if (@localVersion == @remoteVersion) then
    if (@verboseLevel>0) then
      message(@MSG_INFO, '   > local and remote version match: '+@localVersion);
    endif
    Next; // jump to next method 
  else
    // update will only be performed if both methods contain correct version information and remote version is higher (numeric compare)
    if (@remoteVersion>@localVersion) then 
      @updateBufferEntry = { @currentMethod, @updateData };
      @updateBuffer = InsertValue(@updateBuffer, @updateBufferEntry); 
      if (@verboseLevel>0) then
        message(@MSG_WARNING, '   > remote version '+@remoteVersion+' newer than local version '+@localVersion+'. Method implementation will be updated.');
      endif
    else
      if (@verboseLevel>0) then
        message(@MSG_INFO, '   > local version '+@localVersion+' is newer than remote version '+@remoteVersion+'. Nothing will be done.');       
      endif
      Next; // jump to next method  
    endif
  endif
Next


// 5. replace current method sourcecode with updated one
ForEach @m in (@updateBuffer)
  @currentMethod = @m[1];
  @updateData    = @m[2];

  // it seems to be not possible to MODIFY an existing method, you can only ADD or REMOVE the entire method, so thats what we will do..
  @updateData = Substitute(@updateData, '%', '%%'); // again, this is most likely not perfect if you go crazy with percent signs..
  @updateData = Substitute(@updateData, '=', '%=');
  @updateData = 'PqlStatement='+@updateData;
  
  @methodId = @self\$MethDef(.$MethNameIntern==@currentMethod).$MethId; 
  @methDef = @node.InstantiateTransient(@OMSMETHDEF).Return1;
  @methDef.MethNameIntern     = @currentMethod;
  @methDef.MethNameVisible    = @currentMethod;
  @methDef.Icon               = \{fc982e70-2e40-11de-a51f-d8151b665999}.$id; // PPDE project png
  @methDef.Description        = 'Last update: '+ToString(DateTime());
  @methDef.Privileges         = {'$_Developer', '$_Administrator','$_System Administrator','$_User'};
  @methDef.ImplementationName = 'PqlExecute';
  @methDef.ValidForInstance   = 1;
  @methDef.Type               = 2;
  @methDef.ParamCount         = 1;
  @methDef.Param              = { @updateData };
  if (!@simulate) then 
    @self.DeleteMethodDefinition(@methodId);
    @methDef.Create(@self).Return1; 
  endif
Next


// 6. update version information
@updateUrl = @updateBaseURL + @VERSION_FILE;
$local($ie): @tempData.TargetName = @updateUrl;
if ($Error) then
  message(@MSG_WARNING, '['+@class+'::'+@method+'] Could not find resource at '+@updateUrl);
  return -1; // end script if no data could be retrieved
endif
@fileHandle = FileOpen(@tempData, 'TargetName','r');
@version = FileReadString(@fileHandle, -1);
FileClose(@fileHandle);

@attrId  = @self\$AttrDef(.$AttrNameIntern=='Version').$AttrId;
@attrDef = @node.InstantiateTransient(@OMSATTRHDEF).Return1;
@attrDef.AttrNameVisible = 'Version';
@attrDef.AttrNameIntern  = 'Version';
@attrDef.Type            = 8;
@attrDef.DefaultValue    = @version;
@attrDef.Description     = 'Current version number of the ConsultantToolkit';
@attrDef.EditMode        = 'Text';
@attrDef.EditProperty    = 'GROUP(About)';
@attrDef.VisibleForEdit  = true;
@attrDef.ViewConstraints = 'ObjType==1';

if (!@simulate) then
  @self.DeleteAttributeDefinition(@attrId);
  @attrDef.Create(@self).Return1; 
endif

if (@verboseLevel>0) then
  message(@MSG_INFO, '=== Finished Online-Update === ['+Count(@methodsToUpdate)+' methods processed, '+Count(@updateBuffer)+' updated]');
endif
return 0;