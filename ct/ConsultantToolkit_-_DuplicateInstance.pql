/* PQL script "DuplicateInstance" created 2011 by TimoP
 * Version 1.1
 * 
 * Description:  
 *   The script creates a duplicate of an existing instance in a general container of choice. The dulicate instance will be of the same type 
 *   and contain the same attribute values as the original. The node of the general container defines where the new duplicate will be created.
 *   Resources (instances derived from class RC_RESOURCE) will be automatically renamed to ensure they have a unique name.
 * 
 * Input parameters:
 *   -
 *
 * Dependencies: 
 *   $self::CopyAttributesGeneric() 
 *
 * Return: 
 *   0 after successful operation
 * 
 */


@MSG_INFO      = 'PUGM0002I'; 
@MSG_WARNING   = 'PUGM0001W'; 
@MSG_ERROR     = 'PUGM0003E';
@OBJTYPE_CLASS = 1;
@RC_RESOURCE   = {86e9223c-57ac-304a-b75a-09f39618a40e};

@self = $self.$id,$node,*;
@class  = @self\$ClassGUID.$InternalName;
@method = 'DuplicateInstance';

@sourceObj    = @self.ObjectDuplicationSourceOid;
@container    = @self.ObjectDuplicationContainerOid;
@verbodeLevel = @self.VerboseLevel; 
@targetNode   = @container.$node;

if (isInvalid(@sourceObj) OR isInvalid(@container)) then
  message(@MSG_ERROR, '['+@class+'::'+@method+'] Invalid source or container OID'); 
endif

if (@verbodeLevel>0) then
  message(@MSG_INFO, '['+@class+'::'+@method+'] Creating copy of "'+@sourceObj.$displayname+'" ('+@sourceObj.$id+') in folder "'+@container.$displayname+'" ('+@container.$id+')...');
endif  
@originator = @sourceObj\$classGUID(*:).$id,$name,$objType;
if (@originator.$objType==@OBJTYPE_CLASS) then
  @method = "Instantiate"; // if instance is derived from a class
else
  @method = "InstantiateTemplate"; // if instance is derived from a template
endif

@newInstance = @targetNode.call(@method, @originator.$id, @container, @originator.$id).Return1;
@self.CopyAttributesGeneric(@sourceObj, @newInstance, @verbodeLevel);  


// special handling for resources:
// new instances must be renamed  as otherwise duplication will fail due to common rule for unique resource names
if (@sourceObj.$Inheritance like @RC_RESOURCE) then
  @className    = @originator.$name;
  @originalName = @sourceObj.$name;
  @newName      = @originalName + ' Copy';

  @idx = 1;
  While(true)
    @idx++;
    $0($v,$np): @rc = $Search($Instances Of RC_RESOURCE:.$name==@newName).$id top 1;
    if (count(@rc)==0) then
      break; // @newName is free and can be used for duplicate
    else
      @regex = "\(\d+\)$";
      @match = RegExpMatch(@newName, @regEx);
      if (count(@match)>0) then
        @match = @match[1];
        @newName = Left(@newName, Length(@newName)-Length(@match)) + '(' +@idx+')';
      else
        @newName = @newName + ' ('+@idx+')';
      endif
    endif
  Next
  @newInstance.$name = @newName;
  message(@MSG_WARNING, '['+@class+'::'+@method+'] Duplicate instance was renamed to "'+@newName+'" as resources must have unique names. Please change the name according to your needs.'); 
endif

return 0;
