
/* PQL script "FileSystemImportGeneric", created 2015 by Timo Pannes
 * Version: 1.0
 *
 * Description:  
 * 
 * Input parameters:
 *   Param1:  source directory, e.g. C:\FS_Import\Resources
 *   Param2:  OID of the root folder in PO where objects will be created
 *   Param3:  array of regular expression defining which files to exclude from import, e.g. Array("\.bak$", "\.tmp$")
 *   Param4:  array of regular expression defining which folders to exclude from import, e.g. Array("^\.git$")
 *   Param5:  flag defining whether to use versioned objects (true) or unversioned objects (false)
 *   Param6:  flag defining whether to create a dedicated folder in PO for root (true) or not (false)
 *   Param7:  flag defining whether files are imported from local filesystem (true) or from server filesystem (false)
 *   Param8:  flag defining whether import should be simulated (true) or not (false). When enabled, no objects are created or changed.
 *   Param9:  verbose level (0: no output, 5: max. output)   
 *
 * Return: 
 *   Number of imported files
 * 
 */


// --- Input parameters ------------------------------------------------------------
@fsSourceDir         = $Param1;
@poRootFolder        = $Param2;
@excludeFilePatterns = $Param3;
@excludeDirPatterns  = $Param4;
@useVersionedObjects = $Param5;
@createRootFolder    = $Param6;
@executeLocally      = $Param7;
@simulationMode      = $Param8;
@verboseLevel        = $Param9;  
// ---------------------------------------------------------------------------------

@fileMappingTable = Array( 
// RegExMatch        |  Data class GUID unversioned            | Data class GUID versioned            | Binary attribute name
//  "\.afp$"           , { {c7e9ef33-5f79-3899-abfa-3b49b4f51867}, $Invalid                              , 'AFPDS_Name' },
  "\.bmp$"           , { {a4874aa5-d2fb-11d7-ac95-4b8eeaaf196f}, $Invalid                              , 'TargetName' },
  "\.css$"           , { {e0bd6030-6df6-11d9-8029-d5138adcc649}, {81f37a14-b327-91e2-1a0e-0770a44e327e}, 'TargetName' },
  "\.csv$"           , { {95e3e281-e9d4-11db-b737-43179b78a239}, $Invalid                              , 'TargetName' },
  "\.gif$"           , { {838b5ce3-f054-3487-b5cd-c01a9749ae58}, {e2576540-c697-11d9-b858-64381008aa63}, 'TargetName' },
  "\.html?$"         , { {86a48a30-6987-11d6-89c6-55c344946a9e}, {0a4a8ec1-c697-11d9-b858-64381008aa63}, 'TargetName' },
  "\.ico$"           , { {ae65a921-8b65-11df-9222-d8151b665999}, {4857a791-9584-11df-9222-d8151b665999}, 'TargetName' },
  "\.jpe?g$"         , { {2938c020-6988-11d6-89c6-55c344946a9e}, {3586c081-122f-11de-a51f-d8151b665999}, 'TargetName' },
  "\.js$"            , { {83845b81-b6b9-11e1-ac77-d8151b665999}, {555e19c3-b6e2-11e1-ac77-d8151b665999}, 'TargetName' },
  "\.json$"          , { {de08abfd-dc20-375d-bd49-a9869d03af38}, {48532453-92c0-11e1-b743-473d130c4202}, 'TargetName' }, // dataAsciiBinary
  "\.pdf$"           , { {e48e0ae0-4c92-329f-a2f8-f1dff44faf61}, {5f29f161-6104-11dc-b6cc-d8151b665999}, 'TargetName' }, 
  "\.png$"           , { {5562e610-af79-11db-b5ab-d8d710b257b7}, {d11fae41-1233-11de-a51f-d8151b665999}, 'TargetName' },
  "\.svg$"           , { {466a2351-1843-11de-a51f-d8151b665999}, {ab3b01a1-1843-11de-a51f-d8151b665999}, 'TargetName' },
  "\.swf$"           , { {02765ce2-6671-11da-8000-000000000000}, {53acc091-e3e4-11da-8000-000000000000}, 'TargetName' },
  "\.tiff?$"         , { {d2662220-cd0d-3984-a31a-de389451fe2f}, $Invalid                              , 'TargetName' },
  "\.txt$"           , { {de08abfd-dc20-375d-bd49-a9869d03af38}, {48532453-92c0-11e1-b743-473d130c4202}, 'TargetName' },
  "\.xml$"           , { {6e5fdb00-f396-11d9-8000-000000000000}, {95556621-c484-11da-b592-6f8de7bdf5b5}, 'TargetName' },
  "\.xsd$"           , { {557de0b1-bd27-11dd-9435-722ec8990d04}, {8c3ce951-bdb8-11d7-816a-eade721d18f8}, 'TargetName' },
  // the wildcard match has to be the last!
  ".*"               , { {e1d3371a-1068-11d8-ab33-7bec1e1d933d}, $Invalid                              , 'TargetName' }  // dataGenericBinary 
);


@MSG_ERROR             = 'PFGM0001E';
@MSG_WARNING           = 'PFGM0002W';
@MSG_INFO              = 'PFGM0003I';
@DIR_SEPARATOR_WINDOWS = '\';
@DIR_SEPARATOR_UNIX    = '/';
@method                = 'FileSystemImportGeneric';
@self                  = $Self.$Id,$Node,*;
@class                 = @self\$ClassGUID.$InternalName;

// determine import node
@importNode = $CurrentNodeId;
If (!@executeLocally) Then
  @importNode = @poRootFolder.$Node;
EndIf

If (@verboseLevel>0 || @simulationMode) Then
  Message(@MSG_INFO, '');
  Message(@MSG_INFO, '['+@class+'::'+@method+'] Importing data from '+@fsSourceDir+' into folder '+@poRootFolder);
  If (@simulationMode) Then
    Message(@MSG_INFO, '[Simulation mode is ON, no files are physically imported]');
  EndIf
EndIf

// check if input parameters are valid
If (@poRootFolder==$Invalid) Then 
  Message(@MSG_ERROR, 'Invalid root folder specified: '+@poRootFolder); 
EndIf

// get directory separator for import node filesystem
@dirSeparator    = $invalid; 
@environmentInfo = FromMem(@importNode\(NodeInformation:).Environment);
@osPath          = @environmentInfo\$Subset(*:.Name=='ISIS_OBJECT_SPACE').Value;
If (Left(@osPath, 1)==@DIR_SEPARATOR_UNIX) Then
  @dirSeparator = @DIR_SEPARATOR_UNIX;
Else
  @dirSeparator = @DIR_SEPARATOR_WINDOWS;
EndIf  

// cut off directory separator from import directory path if necessary
If (Right(@fsSourceDir, 1)==@dirSeparator) Then
  @fsSourceDir = Left(@fsSourceDir, Length(@fsSourceDir)-1);
EndIf


if (@useVersionedObjects) then
  @fileMappingTableClassGUIDIndex = 2;
  @dirClassGuids = Array({e19846e1-b35b-11da-b5cf-9f57b806ca18});
else
  @fileMappingTableClassGUIDIndex = 1;
  @dirClassGuids = Array({587208a2-11d0-34fb-9821-a31624668549});
endif


@includeDirPatterns  = Array(".*");
@includeFilePatterns = Array();
@fileClassGuids      = Array();
@objCreatedCount     = 0;
@idx = 1;
While (@idx < Count(@fileMappingTable))
  @includeFilePatterns = InsertValue(@includeFilePatterns, @fileMappingTable[@idx]);
  @idx2 = @fileMappingTableClassGUIDIndex;
  // fallback to non-versioned class if there is no versioned one available for a particular data type
  If (@fileMappingTableClassGUIDIndex==2 && @fileMappingTable[@idx+1][2]==$Invalid) Then
    @idx2 = 1;
  EndIf
  @fileClassGuids      = InsertValue(@fileClassGuids, @fileMappingTable[@idx+1][@idx2]);
  @idx += 2;
Next

                       


// call kernel method "GetDirectoryStructure" to retrieve file tree as PQL set
@flags     = "r"; // recursive, other options are "fpm" for full path match of regular expressions and "md5" for checksum generation
@fsContent = FromMem(@self.GetDirectoryStructure(@fsSourceDir,
                                                 @includeDirPatterns,
                                                 @excludeDirPatterns,
                                                 @includeFilePatterns,
                                                 @excludeFilePatterns,
                                                 @dirClassGuids,
                                                 @fileClassGuids,
                                                 @flags).Return1);
@fsContent = @fsContent\$Subset(*:).$TreeLevel,* Skip 1;

If (Count(@fsContent)==0) then
  Message(@MSG_WARNING, 'Directory "'+@fsSourceDir+'" is empty. Nothing to import.');
  Return 0;
Endif


// create objects in PO based on filesystem listing
@fsPoMappings    = Array();
@folderIdStack   = Array(@poRootFolder);
@folderNameStack = Array(@fsSourceDir);
@currentRoot     = @folderIdStack[1];
ForEach @fsItem in (@fsContent)
  @fsItemTreeLevel = @fsItem.$TreeLevel;
  @fsItemName      = @fsItem.FSName;
  @fsItemType      = @fsItem.FSType;
  @fsItemClass     = @fsItem.$ClassGUID;
  
  If (@fsItemClass==$Invalid) Then  
    // unknown data file -> use default data class (e.g. ASCII binary)
    @fsItemClass = @fileMappingTable[Count(@fileMappingTable)][1];
  EndIf

  If (@simulationMode) Then
    @method = 'InstantiateTransient';
  Else
    @method = 'InstantiateExtended';
  EndIf

  @fsFilePath  = '';
  
  If (@fsItemType=="D") Then // D = directory
    @currentRoot              = @folderIdStack[@fsItemTreeLevel];
    @importNode: @poNewObject = @currentRoot.@method(@dirClassGuids[1]).Return1;    
    @folderIdStack            = SetValue(@folderIdStack, @poNewObject, @fsItemTreeLevel+1);
    @folderNameStack          = SetValue(@folderNameStack, @fsItemName, @fsItemTreeLevel+1);
  ElseIf (@fsItemType=="F") Then // F = file
    @importNode: @poNewObject = @currentRoot.@method(@fsItemClass).Return1;
    @objCreatedCount++;
    @idx = 1; 
    // generate file path from folder names stack (this could be optimized in the future)  
    While (@idx <= @fsItemTreeLevel)
      @fsFilePath += (@folderNameStack[@idx] + @dirSeparator);
      @idx++;
    Next 
    @fsFilePath += @fsItemName;
    @fsPoMappings = InsertValue(@fsPoMappings, { @fsFilePath, @poNewObject });    
    Message(@MSG_INFO,' > ' + @fsFilePath);  
  Else
    Message(@MSG_WARNING, 'Unsupported filesystem type "'+ @fsItemType + '" defined for item "'+@fsItemName+'"');
  EndIf
  @poNewObject.$Name = @fsItemName;
Next

// import binary data
if (true) then @importNode: 
  ForEach @dm in (@fsPoMappings)
    @file = @dm[1];
    @obj  = @dm[2];
    @obj.TargetName = @file;
  Next
endif

Return @objCreatedCount;
