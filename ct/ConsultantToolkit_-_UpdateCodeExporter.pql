/* PQL script "UpdateCodeExporter" created 2013 by TimoP
 * Version 1.0 BETA
 * 
 * Description:  
 *   The script downloads the latest version of the CodeExporter PQL code from a GitHub repository 
 *   and update existing method "CodeExportGeneric" if there is a newer version.
 *
 * 
 * Input parameters:
 *   ---
 *
 * Return: 
 *   0 after successful operation
 * 
 */


@self = $self.$id,$node,$DeploymentState,*;
@self = \{16566761-a57a-11e1-9806-711f5dc761c1}.$id,$node,$DeploymentState;
@node = @self.$node;
@methodName   = 'CodeExportGeneric';
@branch       = 'dev'; // latest DEV version, change to "master" for latest stable and tested version 


@MSG_WARNING         = 'PFGM0002W';
@MSG_INFO            = 'PFGM0003I';
@UPDATE_BASE_URL     = 'https://raw.github.com/tpannes/pqlhub/';
@UPDATE_PATH         = '/ct/ConsultantToolkit_-_'+@methodName+'.pql';
@DATAGENERICBINARY   = {e1d3371a-1068-11d8-ab33-7bec1e1d933d};
@OMSMETHDEF          = {cbbf7ed0-f1cc-11dd-8d37-873433f8a72c};
@DEPLOYMENTSTATE_DEV = 1;


// try to import new version from update URL
@updatePath = @UPDATE_BASE_URL + @branch + @UPDATE_PATH;
@tempData   = @node.InstantiateTransient(@DATAGENERICBINARY).Return1;
$local($ie): @tempData.TargetName = @updatePath;
if ($Error) then
  message(@MSG_WARNING, 'Could not load resource at '+@updatePath+'. Please check your internet connection.');
  return 1;
else
  message(@MSG_INFO, 'Received data from '+@updatePath+'..');
endif

@pqlData = @self\$MethDef(.$MethNameIntern==@methodName).$Param[1];
@pqlData = Right(@pqlData, Length(@pqlData)-length('PqlStatement='));
// this is not perfect, there might be cases where percent replacement needs to be extended to get proper PQL code
@pqlData = Substitute(@pqlData, '%%', '%');
@pqlData = Substitute(@pqlData, '%=', '=');

@fileHandle = FileOpen(@tempData, 'TargetName','r');
@updateData = FileReadString(@fileHandle, -1);
FileClose(@fileHandle);
//@updateDataSize = Length(@updateData);
@version = RegExpMatch(@updateData, '([0-9]*\.[0-9]*).*\r');

if (Count(@version)) then
  @version = ParseAmount(@version[2]);
else
  @version = '???'; // this should never happen as long as version number is included in first line
endif

// check if imported code is equal to current version  
// TODO: this doesn't seem to work yet, so update is always performed!
if (@updateData == @pqlData) then
  message(@MSG_INFO, 'The current version is already up-to-date');
  return 0; 
else
  message(@MSG_INFO, 'Installing update to version: '+@version);
endif

// create new version of class if necessary
if (@self.$DeploymentState!=@DEPLOYMENTSTATE_DEV) then
  message(@MSG_INFO, ' >> Creating new version of ConsultantToolkit..');
  @classToUpdate = @self.ProjectNewVersion(@self.$id,$CurrentProjectId,@self.$id).Return1;
else
  @classToUpdate = @self.$id;
endif

// again, this is most likely not perfect if you go crazy with percent signs..
@updateData = Substitute(@updateData, '%', '%%');
@updateData = Substitute(@updateData, '=', '%=');
@updateData = 'PqlStatement='+@updateData;


// it seems to be not possible to MODIFY an existing method
// you can only add or remove entire methods, so thats what we will do..
@codeExportMethId = @classToUpdate\$MethDef(.$MethNameIntern=='CodeExportGeneric').$MethId;
message(@MSG_INFO, ' >> Updating existing method definintion..');
@classToUpdate.DeleteMethodDefinition(@codeExportMethId);

@methDef = @node.InstantiateTransient(@OMSMETHDEF).return1;
@methDef.MethNameIntern     = "CodeExportGeneric";
@methDef.MethNameVisible    = "CodeExportGeneric";
@methDef.Icon               = 0.0.1b04a.c20058b4; // PPDE project png
@methDef.Description        = 'Last update: '+ToString(DateTime());
@methDef.Privileges         = {'$_Developer', '$_Administrator','$_System Administrator','$_User'};
@methDef.ImplementationName = 'PqlExecute';
@methDef.ValidForInstance   = 1;
@methDef.Type               = 2;
@methDef.ParamCount         = 1;
@methDef.Param              = { @updateData };
@methDef.Create(@classToUpdate).Return1; 

message(@MSG_INFO, ' >> Finished.');
return 0;