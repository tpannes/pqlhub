/* PQL script "ResolveCyclicReferences" created 2012 by TimoP
 * Version 1.0
 * 
 * Description:  
 *   The script will search for all agents on a specified node and check if the node is within their parent tree. 
 *   If no connection to the node is found, it means that the agent has cyclic reference(s) with one or more queues.
 *   In that case, all parent references of these agents are deleted so that the agent is automatically moved to the recycle bin.
 *   In some cases, it happens that an agent has no parent references at all due which means that there are inconsitencies in the 
 *   obejct space. In this case, the script performs a "CheckThisObject" on the agent which should also move it to the recycle bin.
 *   However, it is recommended to do a "CheckObjects" on the node and run the script again.
 * 
 * Return: 
 *   Number of processed objects
 * 
 */


//@MSG_ERROR   = 'PFGM0001E';
@MSG_WARNING = 'PFGM0002W';
@MSG_INFO    = 'PFGM0003I';

@CLASS_AGENT = 'AGENT';
@ENGINESTATUS_AGENT_ACTIVE = 1;

@self   = $self.$id,$displayname,$node,$classGUID,$inheritance,*;
@class  = @self\$ClassGUID.$internalName;
@method = 'ResolveCyclicReferencesGeneric';


@targetNode   = toObjRef($param1);
@objType      = $param2; // defines which object type is checked for cyclic references (default: AGENT)
@simulation   = $param3;
@verboseLevel = $param4;


@targetNode($np): @objectsToCheck = $Search($Instances Of @objType:).$id,$engineStatus;
@objectsToCheckCount = count(@objectsToCheck);

if (@verboseLevel>0) then
  message(@MSG_INFO, '['+@class+'::'+@method+'] START processing');
  if (@simulation) then
    message(@MSG_INFO, ' Simulation mode is ON. No changes are performed in Papyrus Objects.');
  endif  
  message(@MSG_INFO, ' Found '+@objectsToCheckCount+' objects of type "'+@objType+'" on node '+@targetNode);
  message(@MSG_INFO, ' Filtering result set for orphaned objects by checking the parent tree of each object...');
endif

@idx = 1;
@orphanedObjects = createSet();
@inconsitentObjectsFound = false;

forEach @obj in (@objectsToCheck)
  if (@verboseLevel>1) then
    message(@MSG_INFO, ' >> processing '+@objType+' '+@idx+' of '+@objectsToCheckCount+' ['+@obj.$id+']...');
  endif
  @targetNode($np,$im): @parentNode = @obj\$ParentTree(*:.$node==@targetNode)\..(NODE:).$id;      
  if (count(@parentNode)==0) then
    if (@verboseLevel>1) then
      message(@MSG_WARNING, '    Cyclic reference found!');
    endif
    @orphanedObjects = union(@orphanedObjects, @obj);
  else
    if (@verboseLevel>1) then
      message(@MSG_INFO, '    OK');
    endif
  endif
  @idx++;
next

@orphanedObjectsCount = count(@orphanedObjects);
if (@orphanedObjectsCount>0) then

  if (@verboseLevel>0) then
    message(@MSG_INFO, ' Found '+@orphanedObjectsCount+' orphaned object(s) of type "'+@objType+'" that have no connection to their owner node');
  endif

  // special handling for agents: search for active agents and stop them 
  if (@objType==@CLASS_AGENT) then
    @activeAgents = @orphanedObjects\$subset(*:.$engineStatus==@ENGINESTATUS_AGENT_ACTIVE).$id;
    @activeAgentsCount = count(@activeAgents);
    if (@activeAgentsCount>0) then
      if (@verboseLevel>0) then
        message(@MSG_INFO, ' Found '+@activeAgentsCount+' active agents that will be stopped now...');
      endif 
      if (!@simulation) then 
        @targetNode: @activeAgents.start("StopNAgent");
      endif  
    endif
  endif  
  
  // remove all parent references for all orphaned objects so that they are moved into recyle bin
  forEach @obj in (@orphanedObjects)
    @targetNode($im): @objParents = @obj\..(*:).$id;
    @objParentCount = count(@objParents);
    if (@objParentCount>0) then
      if (@verboseLevel>2) then
        message(@MSG_INFO, ' >> '+@objParentCount+' parent reference(s) will be deleted for object '+@obj+' ...');
      endif
      forEach @parent in (@objParents)
        if (!@simulation) then 
          @targetNode: @obj.DeleteReference(@parent);
        endif  
      next
    else
      if (@verboseLevel>2) then
        message(@MSG_INFO, ' >> no parent references found for object '+@obj+'. Running "CheckThisObject"...');
      endif
      if (!@simulation) then 
        @targetNode: @obj.CheckThisObject();
      endif
      @inconsitentObjectsFound = true;
    endif  
  next
 
endif
if (@verboseLevel>0) then
  message(@MSG_INFO, '['+@class+'::'+@method+'] FINISHED. '+@orphanedObjectsCount+' objects processed.');
  if (@inconsitentObjectsFound) then
    message(@MSG_INFO, 'Please run "Check Objects" on node '+@targetNode+' as inconsistent objects were found during processing!');
  endif
endif  

return @orphanedObjectsCount;
