/* PQL script "OnlineUpdate" created 2013 by TimoP
 * Version 1.1
 * 
 * Description:  
 *   The script downloads the latest version of the CodeExporter PQL code from a GitHub repository 
 *   and update existing method "CodeExportGeneric" if there is a newer version.
 *   Only PQL methods with internal name suffix "Generic" will be updated
 * 
 * Input parameters:
 *   ---
 *
 * Return: 
 *   0 after successful operation
 * 
 */


@branch       = 'dev'; // latest DEV version, change to "master" for latest stable and tested version 
@simulate     = true;

@MSG_ERROR   = 'PFGM0001E';
@MSG_WARNING = 'PFGM0002W';
@MSG_INFO    = 'PFGM0003I';

@self   = $self.$id,$displayname,$node,$classGUID,$inheritance,$deploymentState;
@class  = @self\$ClassGUID.$internalName;
@node   = @self.$node;
@method = 'OnlineUpdate';
@verboseLevel = 5;


@methodsToUpdate = @self\$Inheritance\$MethDef(.$ImplementationName like "PqlExecute*" AND .$MethNameIntern like "*Generic").$MethNameIntern;


@UPDATE_BASE_URL     = 'https://raw.github.com/tpannes/pqlhub/'+@branch+'/ct/';
@DATAGENERICBINARY   = {e1d3371a-1068-11d8-ab33-7bec1e1d933d};
@OMSMETHDEF          = {cbbf7ed0-f1cc-11dd-8d37-873433f8a72c};
@DEPLOYMENTSTATE_DEV = 1;
@FILENAME_PREFIX     = 'ConsultantToolkit_-_';
@FILENAME_SUFFIX     = '.pql';
@REGEX_EXTRACT_VN    = '[\s]*([0-9]+\.[0-9]+)[\s]+[.]*';


@tempData   = @node.InstantiateTransient(@DATAGENERICBINARY).Return1;
if (@verboseLevel>0) then
  message(@MSG_INFO, '['+@class+'::'+@method+'] Starting Online Update...'); 
endif

ForEach @m in (@methodsToUpdate)
  
  @currentMethod = @m.$MethNameIntern;
  if (@verboseLevel>0) then
    message(@MSG_INFO, ' > processing method "'+@currentMethod+'"');
  endif
  
  // 1. get method source code from online repository
  @updateUrl = @UPDATE_BASE_URL + @FILENAME_PREFIX  + @currentMethod + @FILENAME_SUFFIX;
  $local($ie): @tempData.TargetName = @updateUrl;
  if ($Error) then
    message(@MSG_WARNING, '['+@class+'::'+@method+'] Could not find resource at '+@updateUrl);
    return -1; // end script if no data could be retrieved
  endif
  @fileHandle = FileOpen(@tempData, 'TargetName','r');
  @updateData = FileReadString(@fileHandle, -1);
  @updateDataSize = Length(@updateData);
  FileClose(@fileHandle);
  
  if (@verboseLevel>1) then
    message(@MSG_INFO, '    > received data from URL: '+@updateUrl + ' (length: '+@updateDataSize+')');
  endif
  
  // 2. get method source code from class definition
  @pqlData = @self\$MethDef(.$MethNameIntern==@currentMethod).$Param[1];
  @pqlData = Right(@pqlData, Length(@pqlData)-length('PqlStatement='));
  @pqlData = Substitute(@pqlData, '%%', '%'); // this is not perfect, there might be cases where percent replacement needs to be extended to get proper PQL code
  @pqlData = Substitute(@pqlData, '%=', '=');

  // 3. determine versions of both local and remote sourcecode
  @versionUpdate    = RegExpMatch(@updateData, @REGEX_EXTRACT_VN);
  @versionInstalled = RegExpMatch(@pqlData, @REGEX_EXTRACT_VN);
  @versions = {@versionInstalled, @versionUpdate};
  print("@versionUpdate: "+@versionUpdate);
  @idx = 1;
  While (@idx <= 2)
    @v = @versions[@idx];
    if (Count(@v)) then
      @v = ParseAmount(@v[1]);
    else
      @v = $invalid; // this should never happen as long as version number is included in first line
    endif
    @versions = InsertValue(@versions, @v, @idx);
    @idx++;
  Next
  if (@verboseLevel>1) then
    message(@MSG_INFO, '    > local version: '+@versions[1]+'  |  remote version:    '+@versions[2]);
  endif

  // 4. check if imported code is equal to current version  
  if (@updateData == @pqlData) then
    if (@verboseLevel>0) then
      message(@MSG_INFO, ' > the current version of method "'+@currentMethod+'" is already up-to-date');
    endif
    Next;  // jump to next method    
  else
    // update will only be performed if both methods contain correct version information and remote version is higher (numeric compare)
    if (@versionUpdate>@versionInstalled AND @versionInstalled!=$invalid) then  
      if (@verboseLevel>0) then
        message(@MSG_INFO, ' > remote version is newer than local version. Method implementation will be updated.');
      endif
    else
      if (@verboseLevel>0) then
        message(@MSG_INFO, ' > remote version is NOT newer than local version. Nothing will be done.');       
      endif
      Next // jump to next method  
    endif
  endif

  // 5. create new version of class if necessary  
  if (@self.$DeploymentState!=@DEPLOYMENTSTATE_DEV AND !@simulate) then
    if (@verboseLevel>3) then
      message(@MSG_INFO, '    > creating new version of ConsultantToolkit..');
    endif
    if ($CurrentProjectId==$invalid) then
      message(@MSG_ERROR, 'No default project defined.');
    endif
    @classToUpdate = @self.ProjectNewVersion(@self.$id,$CurrentProjectId,@self.$id).Return1;
  else
    @classToUpdate = @self.$id;
  endif

  // 6. replace current method sourcecode with updated one
  // it seems to be not possible to MODIFY an existing method, you can only ADD or REMOVE the entire method, so thats what we will do..
  @updateData = Substitute(@updateData, '%', '%%'); // again, this is most likely not perfect if you go crazy with percent signs..
  @updateData = Substitute(@updateData, '=', '%=');
  @updateData = 'PqlStatement='+@updateData;
  
  @methodId = @classToUpdate\$MethDef(.$MethNameIntern==@currentMethod).$MethId; 
  @methDef = @node.InstantiateTransient(@OMSMETHDEF).Return1;
  @methDef.MethNameIntern     = @currentMethod;
  @methDef.MethNameVisible    = @currentMethod;
  @methDef.Icon               = \{fc982e70-2e40-11de-a51f-d8151b665999}.$id; // PPDE project png
  @methDef.Description        = 'Last update: '+ToString(DateTime());
  @methDef.Privileges         = {'$_Developer', '$_Administrator','$_System Administrator','$_User'};
  @methDef.ImplementationName = 'PqlExecute';
  @methDef.ValidForInstance   = 1;
  @methDef.Type               = 2;
  @methDef.ParamCount         = 1;
  @methDef.Param              = { @updateData };
  if (!@simulate) then 
    @classToUpdate.DeleteMethodDefinition(@methodId);
    @methDef.Create(@classToUpdate).Return1; 
  endif

Next


if (@verboseLevel>0) then
  message(@MSG_INFO, 'Finished Online-Update. '+Count(@methodsToUpdate)+' methods were processed.');
endif
return 0;